#include "ros/ros.h"
#include "phidget_spatial/PhidgetSpatial.h"

class PhidgetSpatialNode {
public:
    PhidgetSpatialNode(ros::NodeHandle, ros::NodeHandle);
    void run();
private:
    PhidgetSpatial ps_;
    ros::NodeHandle nh_;
    ros::NodeHandle private_nh_;
    ros::Publisher out_;
    double loop_rate_;
};

PhidgetSpatialNode::PhidgetSpatialNode(
        ros::NodeHandle nh,
        ros::NodeHandle private_nh) :
    nh_(nh),
    private_nh_(private_nh)
{
    private_nh_.param("loop_rate", loop_rate_, 10.0); 
    out_ = nh_.advertise<phidget_spatial::Inertia>("inertia", 10);
}

void PhidgetSpatialNode::run() {
    ros::Rate loop_rate(loop_rate_);
    while (ros::ok()) {
        phidget_spatial::Inertia inertia = ps_.getInertia();
        fprintf(stderr, "	publish1\n");
        out_.publish(inertia);
        fprintf(stderr, "	publish2\n");
        ros::spinOnce();
        loop_rate.sleep();
    }
}

int main(int argc, char** argv) {
    ros::init(argc, argv, "phidget_spatial_node");
    ros::NodeHandle nh;
    ros::NodeHandle private_nh("~");

    try {
        PhidgetSpatialNode pen(nh, private_nh);
        pen.run();
    }
    catch(std::runtime_error ex) {
        ROS_ERROR("%s", ex.what());
        return -1;
    }

    return 0;
}

