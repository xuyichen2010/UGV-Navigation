#include "ros/ros.h"
#include "maestro/VelAndAngle.h"
#include <sensor_msgs/Joy.h>

#include <iostream>

using namespace std;

class XboxControllerNode {
public:
    XboxControllerNode(ros::NodeHandle, ros::NodeHandle);
    void joystickCallback(const sensor_msgs::Joy::ConstPtr& msg);
    void run();
private:
    ros::NodeHandle nh_;
    ros::NodeHandle private_nh_;
    ros::Publisher converterCommand;
    ros::Subscriber readJoystick;
    double throttle;
    double turning;
    double backup;

    // disable assignment and copy constructor
    XboxControllerNode& operator=(const XboxControllerNode&);
    XboxControllerNode(const XboxControllerNode&);
};

XboxControllerNode::XboxControllerNode(
        ros::NodeHandle nh,
        ros::NodeHandle private_nh) :
    nh_(nh),
    private_nh_(private_nh)
{
    throttle = 0;
    turning = 0;
    converterCommand = nh_.advertise<maestro::VelAndAngle>("converter_in", 10);
    readJoystick = nh_.subscribe<sensor_msgs::Joy>("joy", 10, &XboxControllerNode::joystickCallback, this);
}

void XboxControllerNode::joystickCallback(const sensor_msgs::Joy::ConstPtr& msg){
    throttle = msg->axes[5]; 
    backup = msg->buttons[1];
    turning = msg->axes[0];
    turning *= -1; //account for direction change in PWM
    
    //maps descending positive range to half of speed range (0-5)m/s
    if(throttle<=1.0 && throttle >=0){
        throttle = (1-throttle)*5;
    }
    //maps descending negative range to (5-10)m/s
    else if(throttle<0 && throttle>=(-1.0)){
        throttle = (((-1)*throttle)*5)+5;
    }
    else{
        throttle = 0;
    }
    //maps radio input to rad/s
    if(turning>=0.2 && turning<=1.0){
        turning = (turning-0.2)*3.125;
    }
    else if(turning>=(-1.0) && turning<=(-0.2)){
        turning = (turning+0.2)*3.125;    
    }
    else{
        turning = 0;
    }
    //small reverse for backing up
    if(backup==1){
        throttle = -2;  //will exceed lowest value on lookup table
    }
 
    //now publish
    maestro::VelAndAngle msg2;
    msg2.velocity = throttle;
    msg2.angle = turning;
    converterCommand.publish(msg2);
    
}

void XboxControllerNode::run() {
    ros::spin();
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "xbox_controller_node");
    ros::NodeHandle nh;
    ros::NodeHandle private_nh("~");

    try {
        XboxControllerNode xcn(nh, private_nh);
        xcn.run();
    }
    catch(std::runtime_error ex) {
        ROS_ERROR("%s", ex.what());
        return -1;
    }

    return 0;
}


