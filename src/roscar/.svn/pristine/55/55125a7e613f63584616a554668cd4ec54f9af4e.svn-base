#include "maestro/Maestro.h"
#include <fcntl.h>
#include <stdio.h>
#include <unistd.h>
#include <termios.h>
#include <math.h>
#include <stdexcept>
#include <iostream>

static const uint8_t DEVICE_NUMBER = 0x0C; // default device number
static const uint8_t GET_ERROR = 0x21;
static const uint8_t GET_POSITION = 0x10;
static const uint8_t SET_TARGET = 0x04;
static const uint8_t START = 0xAA; //must always command this first
static const uint8_t SET_SPEED = 0x07; //set speed command
static const uint8_t GO_HOME = 0x22; //go to home position

Maestro::Maestro(std::string device, uint8_t dc, uint8_t sc) :
    drive_channel_(dc),
    steering_channel_(sc)
{
    fd_ = open(device.c_str(), O_RDWR | O_NOCTTY);
    
    struct termios options;
    tcgetattr(fd_, &options);
    cfsetispeed(&options, B9600);
    cfsetospeed(&options, B9600);

    options.c_cflag &= ~PARENB;
    options.c_cflag &= ~CSTOPB;
    options.c_cflag &= ~CSIZE;
    options.c_cflag |= CS8;

    // no flow control
    options.c_cflag &= ~CRTSCTS;

    options.c_cflag |= CREAD | CLOCAL;  // turn on READ & ignore ctrl lines
    options.c_iflag &= ~(IXON | IXOFF | IXANY); // turn off s/w flow ctrl

    options.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG); // make raw
    options.c_oflag &= ~OPOST; // make raw

    options.c_cc[VMIN]  = 0;
    options.c_cc[VTIME] = 20;

    if (tcsetattr(fd_, TCSANOW, &options) < 0)
    {
        throw std::runtime_error("init_serialport: Couldn't set term attributes");
    }
}

Maestro::~Maestro() {
    setDrivePosition(0);
    setSteeringPosition(0);
    close(fd_);
}

int Maestro::getError() {
    uint8_t command[3];
    command[0] = START;
    command[1] = DEVICE_NUMBER;
    command[2] = GET_ERROR;

    if (write(fd_, command, sizeof(command)) != 3) {
        perror("error writing"); // TODO
        return -1;
    }

    int n = 0;
    uint8_t response[2];
    do {
        int ec = read(fd_, response+n, 1);
        if (ec < 0) {
            perror("error reading"); // TODO 
            return ec;
        }
        if (ec == 0) {
            continue;
        }
        n++;
    } while (n < 2);

    return (int)response[0] + (int)256*response[1];
}

int Maestro::getDrivePosition() {
    uint8_t command[4];
    command[0] = START;
    command[1] = DEVICE_NUMBER;
    command[2] = GET_POSITION;
    command[3] = drive_channel_;

    if (write(fd_, command, sizeof(command)) == -1) {
        perror("error writing"); // TODO
        return -1;
    }

    int n = 0;
    uint8_t response[2];
    do {
        int ec = read(fd_, response+n, 1);
        if (ec < 0) {
            perror("error reading"); // TODO
            return ec;
        }
        if (ec == 0) {
            continue;
        }
        n++;
    } while (n < 2);

    return (int)response[0] + (int)(256 * response[1]);
}

int Maestro::getSteeringPosition() {
    uint8_t command[4];
    command[0] = START;
    command[1] = DEVICE_NUMBER;
    command[2] = GET_POSITION;
    command[3] = steering_channel_;

    if (write(fd_, command, sizeof(command)) == -1) {
        perror("error writing"); // TODO
        return -1;
    }

    int n = 0;
    uint8_t response[2];
    do {
        int ec = read(fd_, response+n, 1);
        if (ec < 0) {
            perror("error reading"); // TODO
            return ec;
        }
        if (ec == 0) {
            continue;
        }
        n++;
    } while (n < 2);

    return (int)response[0] + (int)(256 * response[1]);
}

bool Maestro::setDrivePosition(uint16_t target) {
    uint8_t command[6];
    command[0] = START;
    command[1] = DEVICE_NUMBER;
    command[2] = SET_TARGET;
    command[3] = drive_channel_;
    command[4] = target & 0x07; // low byte
    command[5] = target >> 7 & 0x7F; // high byte

    if (write(fd_, command, sizeof(command)) == -1) {
        perror("error writing"); // TODO
        return false;
    }

    return true;
}

bool Maestro::setSteeringPosition(uint16_t target) {
    uint8_t command[6];
    command[0] = START;
    command[1] = DEVICE_NUMBER;
    command[2] = SET_TARGET;
    command[3] = steering_channel_;
    command[4] = target & 0x07; // low byte
    command[5] = target >> 7 & 0x7F; // high byte

    if (write(fd_, command, sizeof(command)) == -1) {
        perror("error writing"); // TODO
        return false;
    }

    return true;
}

bool Maestro::setSteerChangeRate(uint16_t target) {

    uint8_t command[6];
    command[0] = START;
    command[1] = DEVICE_NUMBER;
    command[2] = SET_SPEED;
    command[3] = steering_channel_;
    command[4] = target & 0x07; // low byte
    command[5] = target >> 7 & 0x7F; // high byte

    if (write(fd_, command, sizeof(command)) == -1) {
        perror("error writing"); // TODO
        return false;
    }

    return true;

}

bool Maestro::setDriveChangeRate(uint16_t target) {

    uint8_t command[6];
    command[0] = START;
    command[1] = DEVICE_NUMBER;
    command[2] = SET_SPEED;
    command[3] = drive_channel_;
    command[4] = target & 0x07; // low byte
    command[5] = target >> 7 & 0x7F; // high byte

    if (write(fd_, command, sizeof(command)) == -1) {
        perror("error writing"); // TODO
        return false;
    }

    return true;

}

bool Maestro::goHome(){

    uint8_t command[3];
    command[0] = START;
    command[1] = DEVICE_NUMBER;
    command[2] = GO_HOME;

    if (write(fd_, command, sizeof(command)) == -1) {
        perror("error writing: go_home"); // TODO
        return false;
    }

    return true;
}
