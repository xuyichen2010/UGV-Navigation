#include "ros/ros.h"

#include "maestro/MaestroOut.h"
#include "phidget_encoder/Ticks.h"

#include <iostream>

using namespace std;

class ControllerNode {
public:
    ControllerNode(ros::NodeHandle, ros::NodeHandle);
    //~ControllerNode();
    void maestroCallback(const maestro::MaestroOut::ConstPtr&);
    void encoderCallback(const phidget_encoder::Ticks::ConstPtr&);
    void run();

private:
    ros::NodeHandle nh_;
    ros::NodeHandle private_nh_;
    ros::Subscriber readMaestro;
    ros::Subscriber readEncoder;

    // disable assignment and copy constructor
    ControllerNode& operator=(const ControllerNode&);
    ControllerNode(const ControllerNode&);
};

ControllerNode::ControllerNode(
        ros::NodeHandle nh, 
        ros::NodeHandle private_nh) :
    nh_(nh),
    private_nh_(private_nh)
{
    readMaestro = nh_.subscribe("maestro_out", 10, &ControllerNode::maestroCallback, this);
    readEncoder = nh_.subscribe("encoder_out", 10, &ControllerNode::encoderCallback, this);
}

//ControllerNode::~ControllerNode() {}

void ControllerNode::maestroCallback(const maestro::MaestroOut::ConstPtr& msg) {
    
    cout << "MAESTRO DATA";
    cout << "Maestro Error: " << msg->error;
    cout << "Drive Position: " << msg->drive_position;
    cout << "Steering Position: " << msg->steering_position;

}

void ControllerNode::encoderCallback(const phidget_encoder::Ticks::ConstPtr& msg) {

    cout << "ENCODER DATA";
    cout << "Encoder Position: " << msg->position;
    cout << "Relative Change: " << msg->relative_change;
    cout << "Elapsed Time: " << msg->elapsed_time;

}

void ControllerNode::run() {
    ros::Rate loop_rate(10);
    ros::spin();
}

int main(int argc, char** argv) {
    ros::init(argc, argv, "maestro");
    ros::NodeHandle nh;
    ros::NodeHandle private_nh("~");

    try {
        ControllerNode cn(nh, private_nh);
        cn.run();
    }
    catch(std::runtime_error ex) {
        ROS_ERROR("%s", ex.what());
        return -1;
    }

    return 0;
}

