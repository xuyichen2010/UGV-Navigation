#include "ros/ros.h"

#include "maestro/MaestroOut.h"
#include "phidget_encoder/Ticks.h"
#include "phidget_gps/Data.h"
#include "phidget_spatial/Inertia.h"
#include <geodesy/utm.h>  

#include <iostream>
#include <cmath>

using namespace std;

class OdometryNode {
public:
    OdometryNode(ros::NodeHandle, ros::NodeHandle);
    //~OdometryNode();
    void maestroCallback(const maestro::MaestroOut::ConstPtr&);
    void encoderCallback(const phidget_encoder::Ticks::ConstPtr&);
    void gpsCallback(const phidget_gps::Data::ConstPtr&);
    void spatialCallback(const phidget_spatial::Inertia::ConstPtr&);
    void run();

private:
    ros::NodeHandle nh_;
    ros::NodeHandle private_nh_;
    ros::Subscriber readMaestro;
    ros::Subscriber readEncoder;
    ros::Subscriber readGPS;
    ros::Subscriber readSpatial;
    double loop_rate_;

    // disable assignment and copy constructor
    OdometryNode& operator=(const OdometryNode&);
    OdometryNode(const OdometryNode&);
};

OdometryNode::OdometryNode(
        ros::NodeHandle nh, 
        ros::NodeHandle private_nh) :
    nh_(nh),
    private_nh_(private_nh)
{
    private_nh_.param("loop_rate", loop_rate_, 10.0);
    //readMaestro = nh_.subscribe("maestro_out", 10, &OdometryNode::maestroCallback, this);
    //readEncoder = nh_.subscribe("ticks", 10, &OdometryNode::encoderCallback, this);
    //readGPS = nh_.subscribe("gps_data", 10, &OdometryNode::gpsCallback, this);
    readSpatial = nh_.subscribe("inertia", 10, &OdometryNode::spatialCallback, this);
}

//ControllerNode::~ControllerNode() {}

void OdometryNode::maestroCallback(const maestro::MaestroOut::ConstPtr& msg) {
    
    cout << "MAESTRO DATA" << endl;
    cout << "Maestro Error: " << msg->error << endl;
    cout << "Drive Position: " << msg->drive_position << endl;
    cout << "Steering Position: " << msg->steering_position << endl;

}

//Outputs linear velocity as m/s
void OdometryNode::encoderCallback(const phidget_encoder::Ticks::ConstPtr& msg) {

    cout << "ENCODER DATA" << endl;
    cout << "Encoder Position: " << msg->position << endl;
    cout << "Relative Change: " << msg->relative_change << endl;
    cout << "Elapsed Time: " << msg->elapsed_time << endl;

    double vel = 0;

    if((double)msg->elapsed_time == 0){
        cout << "Velocity: " << vel << endl;
    }
    else{
        double signConversion = -1;
        double meters = 3.66; //distance taped out and measured
        double ticks = 126176; //empirically measured ten times and averaged
        double secToMs = 1000;
        double mpsToMph = 2.23694;
        const double TICKTOMETER = (signConversion * meters / ticks) * secToMs * mpsToMph; //determined experimentally
        vel = TICKTOMETER * ((double)msg->relative_change / (double)(msg->elapsed_time));
        cout << "Velocity: " << vel << endl;
    }

}

//Outputs UTM coordinates
void OdometryNode::gpsCallback(const phidget_gps::Data::ConstPtr& msg) {
    
    //Conversion lat/long to UTM coordinates
    geographic_msgs::GeoPoint p;
    p.latitude = msg->latitude;
    p.longitude = msg->longitude;
    p.altitude = msg->altitude;
    geodesy::UTMPoint p_utm;
    geodesy::fromMsg(p, p_utm);
    double easting = p_utm.easting;
    double northing = p_utm.northing;
    double altitude  = p_utm.altitude;

    if(msg->fix_status != 0){
        cout << "GPS DATA" << endl;
        cout << "Fix Status: " << msg->fix_status << endl;
        cout << "Northing: " << northing << endl;
        cout << "Easting: " << easting << endl;
        cout << "Heading:" << msg->heading << endl;
        cout << "Velocity:" << msg->velocity << endl;
    }
    else{
        cout << "GPS DATA" << endl;
        cout << "No Fix..." << endl;
    }
    
}

//Outputs angular velocity of z-axis in rad/s
void OdometryNode::spatialCallback(const phidget_spatial::Inertia::ConstPtr& msg) { 
    /*   
    cout << "IMU DATA" << endl;
    cout << "Time in seconds: " << msg->timeSecs << endl;
    cout << "Time since last second in microSecs: " << msg->timeMicroSecs << endl;
    cout << "X Acceleration: " << msg->xAccel << endl;
    cout << "Y Acceleration: " << msg->yAccel << endl;
    cout << "Z Acceleration: " << msg->zAccel << endl;
    cout << "X Angular Velocity: " << msg->xAngular << endl;
    cout << "Y Angular Velocity: " << msg->yAngular << endl;
    cout << "Z Angular Velocity: " << msg->zAngular << endl;
    cout << "X Magnetic Field: " << msg->xMagField << endl;
    cout << "Y Magnetic Field: " << msg->yMagField << endl;
    cout << "Z Magnetic Field: " << msg->zMagField << endl;
    */
    double convZAngular = msg->zAngular * M_PI / 180;
    cout << convZAngular << endl;
}

void OdometryNode::run() {
    ros::Rate loop_rate(loop_rate_);
    ros::spin();
}

int main(int argc, char** argv) {
    ros::init(argc, argv, "odometry_node");
    ros::NodeHandle nh;
    ros::NodeHandle private_nh("~");

    try {
        OdometryNode cn(nh, private_nh);
        cn.run();
    }
    catch(std::runtime_error ex) {
        ROS_ERROR("%s", ex.what());
        return -1;
    }

    return 0;
}


