#include "ros/ros.h"
#include <tf/transform_broadcaster.h>

#include "maestro/VelAndAngle.h"
#include "nav_msgs/Odometry.h"
#include "phidget_encoder/Ticks.h"
#include "phidget_spatial/Inertia.h"

#include <iostream>
#include <cmath>

using namespace std;

class OpenLoopOdometryNode {
public:
    OpenLoopOdometryNode(ros::NodeHandle, ros::NodeHandle);
    void converterCallback(const maestro::VelAndAngle::ConstPtr&);
    void encoderCallback(const phidget_encoder::Ticks::ConstPtr&);
    void spatialCallback(const phidget_spatial::Inertia::ConstPtr& msg);

    void run();

private:
    ros::NodeHandle nh_;
    ros::NodeHandle private_nh_;
    ros::Subscriber readConverter;
    ros::Subscriber readEncoder;
    ros::Subscriber readSpatial;
    ros::Publisher pushOdometry;
    double loop_rate_;

    double xCurr;
    double yCurr;
    double thetaCurr;

    double totalX;
    double totalTheta;

    double lastTime;

    double velocity;
    double angularVelocity;

    // disable assignment and copy constructor
    OpenLoopOdometryNode& operator=(const OpenLoopOdometryNode&);
    OpenLoopOdometryNode(const OpenLoopOdometryNode&);
};

OpenLoopOdometryNode::OpenLoopOdometryNode(
        ros::NodeHandle nh, 
        ros::NodeHandle private_nh) :
    nh_(nh),
    private_nh_(private_nh)
{
    private_nh_.param("loop_rate", loop_rate_, 10.0);
    readConverter = nh_.subscribe("converter_out", 10, &OpenLoopOdometryNode::converterCallback, this);
    readEncoder = nh_.subscribe("ticks", 1, &OpenLoopOdometryNode::encoderCallback, this);
    readSpatial = nh_.subscribe("Inertia", 1, &OpenLoopOdometryNode::spatialCallback, this);
    pushOdometry = nh_.advertise<nav_msgs::Odometry>("open_loop_odometry", 10);

    xCurr = 0;
    yCurr = 0;
    thetaCurr = 0;

    velocity = 0;
    angularVelocity = 0;
    totalX = 0;
    totalTheta = 0;

    lastTime = ros::Time::now().toSec();
}

//Outputs linear velocity as m/s
void OpenLoopOdometryNode::encoderCallback(const phidget_encoder::Ticks::ConstPtr& msg) {

    double signConversion = -1;
    double meters = 3.66; //distance taped out and measured
    double ticks = 126176; //empirically measured ten times and averaged
    double secToMs = 1000;
    double mpsToMph = 2.23694;

    if((double)msg->elapsed_time != 0){
        const double TICKTOMETER = (signConversion * meters / ticks) * secToMs; //* mpsToMph; //determined experimentally
        velocity = TICKTOMETER * ((double)msg->relative_change / (double)(msg->elapsed_time));
    }
    else{
        velocity = 0;
    }
    
}

//Outputs angular velocity of z-axis in rad/s
void OpenLoopOdometryNode::spatialCallback(const phidget_spatial::Inertia::ConstPtr& msg) { 
  
    angularVelocity = -1 * msg->zAngular * M_PI / 180;        

}

void OpenLoopOdometryNode::converterCallback(const maestro::VelAndAngle::ConstPtr& msg) {
    
    double vel = msg->velocity;
    double angVel = msg->angle;

    double currTime = msg->currTime;
    double dt = currTime - lastTime;

    //update lastTime
    lastTime = currTime;

    double dtheta;
    double xPrime;
    double yPrime;
    double thetaPrime;

    //calculate x, y, theta
    dtheta = -1 * angVel * dt;
    xPrime = xCurr + ( vel * dt * ( cos ( thetaCurr + (dtheta/2.0)) ) );
    yPrime = yCurr + ( vel * dt * ( sin ( thetaCurr + (dtheta/2.0)) ) );
    thetaPrime = thetaCurr + dtheta;

    //update our pose
    xCurr = xPrime;
    yCurr = yPrime;
    thetaCurr = thetaPrime;
    
    //publish xPrime,yPrime,thetaPrime (open loop version)
    nav_msgs::Odometry msg2;
    msg2.pose.pose.position.x = xPrime;
    msg2.pose.pose.position.y = yPrime;
    msg2.pose.pose.position.z = 0.0;

    //set the twist
    msg2.twist.twist.linear.x = vel;
    msg2.twist.twist.angular.z = angVel;
    
    //turn our yaw into a quaternion
    tf::Quaternion q;
    q.setRPY(0,0,thetaPrime); //roll = 0, pitch = 0, yaw = thetaPrime
    geometry_msgs::Quaternion odom_quat;
    tf::quaternionTFToMsg(q, odom_quat);  

    //set our quaternion
    msg2.pose.pose.orientation = odom_quat;

    //publish the message finally
    pushOdometry.publish(msg2);

}

void OpenLoopOdometryNode::run() {

    double dt;

    while (ros::ok()){
        ros::Rate loop_rate(loop_rate_);
        dt = 1 / loop_rate_;
        
        totalX = totalX + (velocity * dt);
        totalTheta = totalTheta + (angularVelocity * dt);
        cout << "Total X: " << totalX << endl;
        cout << "Total Theta: " << totalTheta << endl << endl;
        
        ros::spinOnce();
        loop_rate.sleep();
    }
}

int main(int argc, char** argv) {
    ros::init(argc, argv, "open_loop_odometry");
    ros::NodeHandle nh;
    ros::NodeHandle private_nh("~");

    try {
        OpenLoopOdometryNode cn(nh, private_nh);
        cn.run();
    }
    catch(std::runtime_error ex) {
        ROS_ERROR("%s", ex.what());
        return -1;
    }

    return 0;
}



